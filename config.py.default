"""
This module implements config used by flask application.
Config used not only by flask application will be defined by dotenv.

References:
- SQLALCHEMY_BINDS: https://flask-sqlalchemy.palletsprojects.com/en/2.x/binds/
- JWT Options: https://flask-jwt-extended.readthedocs.io/en/stable/options/
"""
import os

import dotenv

from app.utils.exceptions import DotEnvNotFound, InvalidModeError, ModeNotSet


BASE_DIR = os.path.abspath(os.path.dirname(__file__))
MODES = ['development', 'production', 'testing']


def get_mode_from_env(logger=None):
  if 'FLASK_ENV' not in os.environ:
    msg = f'FLASK_ENV must be set. values: {MODES}'
    if logger is not None:
      logger.fatal(msg)
    raise ModeNotSet(msg)
  mode = os.environ['FLASK_ENV']
  if mode not in MODES:
    msg = f'Invalid FLASK_ENV({mode}) is set. correct values: {MODES}'
    if logger is not None:
      logger.fatal(msg)
    raise InvalidModeError(msg)

  return mode


def load_dotenv(mode, logger=None):
  if not os.path.exists(f'./.env.d/.env.{mode}'):
    msg = f'./.env.d/.env.{mode} was not found.'
    if logger is not None:
      logger.fatal(msg)
    raise DotEnvNotFound(msg)

  dotenv.load_dotenv(f'./.env.d/.env.{mode}')


"""
Though load_dotenv function is called in create_app() in app/__init__.py,
it also needs to be called config.py.
- When 'flask run' is used, config.py is loaded first, and then
  create_app() is called. -> load_dotenv must be done in config.py.
- When 'python gunicorn.py' is used, create_app() is called first
  so load_dotenv in config.py is not needed.
To support both 'flask run' and 'python gunicorn.py',
load_dotenv function is called in both app/__init__.py and config.py.
"""
load_dotenv(get_mode_from_env())


JWT_ACCESS_TOKEN_EXPIRES = 60 * 15
JWT_REFRESH_TOKEN_EXPIRES = 60 * 60 * 24 * 200
JWT_TOKEN_LOCATION = ['headers']
JWT_HEADER_NAME = 'Authorization'
JWT_HEADER_TYPE = 'Bearer'
JWT_BLACKLIST_ENABLED = True
JWT_BLACKLIST_TOKEN_CHECKS = ['access', 'refresh']

config = {
  'app': {},
  'logger': {},
}

config['app']['default'] = {
  'SECRET_KEY': os.environ['FLASK_SECRET_KEY'],
  'DEBUG': True,
  'TESTING': False,
  'SQLALCHEMY_DATABASE_URI': \
      'sqlite:///' + os.path.join(BASE_DIR, 'data.sqlite'),
  'SQLALCHEMY_TRACK_MODIFICATIONS': False,
  'SQLALCHEMY_BINDS': {}, # Used when multiple databases are used.
  'JWT_ACCESS_TOKEN_EXPIRES': JWT_ACCESS_TOKEN_EXPIRES,
  'JWT_REFRESH_TOKEN_EXPIRES': JWT_REFRESH_TOKEN_EXPIRES,
  'JWT_TOKEN_LOCATION': JWT_TOKEN_LOCATION,
  'JWT_HEADER_NAME': JWT_HEADER_NAME,
  'JWT_HEADER_TYPE': JWT_HEADER_TYPE,
  'JWT_BLACKLIST_ENABLED': JWT_BLACKLIST_ENABLED,
  'JWT_BLACKLIST_TOKEN_CHECKS': JWT_BLACKLIST_TOKEN_CHECKS,
  'JWT_SECRET_KEY': os.environ['JWT_SECRET_KEY'],
}

config['logger']['default'] = {
  'version': 1,
  'formatters': {
    'default': {
      'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    },
  },
  'handlers': {
    'console': {
      'class': 'logging.StreamHandler',
      'level': 'DEBUG',
      'formatter': 'default',
      'stream': 'ext://sys.stdout',
    },
    'file': {
      'class': 'logging.FileHandler',
      'level': 'DEBUG',
      'formatter': 'default',
      'filename': 'log/application.log',
    },
  },
  'loggers': {
    'app': {
      'handlers': ['console', 'file'],
      'level': 'DEBUG',
    },
  },
}

for mode in MODES:
  config['app'][mode] = dict(config['app']['default'])
  config['logger'][mode] = dict(config['logger']['default'])

config['app']['development'].update({
  'DEBUG': True,
  'TESTING': False,
  'SQLALCHEMY_DATABASE_URI':\
      'sqlite:///' + os.path.join(BASE_DIR, 'data-dev.sqlite'),
})

config['app']['production'].update({
  'DEBUG': False,
  'TESTING': False,
  'SQLALCHEMY_DATABASE_URI':\
      'sqlite:///' + os.path.join(BASE_DIR, 'data-pro.sqlite'),
})

config['app']['testing'].update({
  'DEBUG': False,
  'TESTING': True,
  'SQLALCHEMY_DATABASE_URI':\
      'sqlite:///' + os.path.join(BASE_DIR, 'tests/data-test.sqlite'),
})
